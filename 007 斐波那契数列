题目描述：
大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0，第1项是1）。n≤39



不可使用递归，因为占用内存过大，内存溢出，导致不能通过
# -*- coding:utf-8 -*-
class Solution:
    def Fibonacci(self, n):
        # write code here
       if(n<=1) return n;
       else return Fibonacci(n-1)+Fibonacci(n-2);
       
改进1：前四位数值给定，可以节省部分空间(递归+节省部分空间)
# -*- coding:utf-8 -*-
class Solution:
    def Fibonacci(self, n):
        # write code here
        res=[0,1,1,2]
        while len(res)<=n:
            res.append(res[-1]+res[-2])
        return res[n]
        
改进2：
带【备忘录】的递归解法  【自顶向下】
明确了问题，其实就已经把问题解决了一半。即然耗时的原因是重复计算，那么我们可以造一个「备忘录」，每次算出某个子问题的答案后别急着返回，先记到「备忘录」里再返回；
每次遇到一个子问题先去「备忘录」里查一查，如果发现之前已经解决过这个问题了，直接把答案拿出来用，不要再耗时去计算了。
一般使用一个数组充当这个「备忘录」，当然你也可以使用哈希表（字典），思想都是一样的。

int fib(int N) {
    if (N < 1) return 0;
    // 备忘录全初始化为 0
    vector<int> memo(N + 1, 0);
    // 初始化最简情况
    return helper(memo, N);
}

int helper(vector<int>& memo, int n) {
    // base case 
    if (n == 1 || n == 2) return 1;
    // 已经计算过
    if (memo[n] != 0) return memo[n];
    memo[n] = helper(memo, n - 1) + 
                helper(memo, n - 2);
    return memo[n];
}

改进3：
#带【DP table】的迭代方法  【自底向上】
class Solution(object):
    def fib(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n<0:
            return 0
        mem=[0,1]
        for i in range(n-1):
            mem.append(mem[-1]+mem[-2])
        return mem[n]
        


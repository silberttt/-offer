题目描述
输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.
示例1
输入
[[1,2],[3,4]]
返回值
[1,2,4,3]


最优解：
#打印第一行，删除第一行，逆时针转动90度。重复以上步骤，直到矩阵为空。
class Solution:
    def printMatrix(self, matrix):
        # write code here
        s=[]
        while matrix:
            s+=matrix[0]
            del matrix[0]
            matrix=zip(*matrix)[::-1]
        return s
        
自己写的错误代码分析：
# -*- coding:utf-8 -*-
class Solution:
    # matrix类型为二维列表，需要返回列表
    def printMatrix(self, matrix):
        # write code here
        s=[]
        while matrix:
            s.append(matrix.pop(0))
            matrix=zip(*matrix)[::-1]
        return s
最后返回的s为： 
s: [[1, 2], (4,), (3,)]  而不是目标返回值
所以不能用append，数据会带着括号附在数列后
要用+做连接操作
        
        
        
        
知识点：
1.zip zip*
详细内容参考：
https://www.cnblogs.com/waltsmith/p/8029539.html
a = [1,2,3]
b = [3,4,5]
c = [7,8,9,10]
zipped = list(zip(a,b)) # 打包为元组的列表，返回值为元组
>> [(1,3),(2,4),(3,5)]
       zipped = list(zip(zipped))   #zip之后若再进行zip，只起到增加括号的作用
       >>[((1, 3),), ((2, 4),), ((3, 5),)]
print zipped[::-1]
>>[(3, 5), (2, 4), (1, 3)]
list(zip(a,c))# 以最短元素个数，最为列表长度
>>[(1,7),(2,8),(3,9)]
list(zip(*zipped)) # zip(*)将打包的元素进行解压，还原为原来的a，b
>>[(1,2,3),(3,4,5)]

2.[： ：-1]
s[index] —— 返回索引值为 index 的那个字符
s[start:] —— 返回从索引值为 start 开始一直到字符串末尾的所有字符
s[start:stop] —— 返回从索引值为 start 开始一直到索引值为 stop 的那个字符之前的所有字符
s[:stop] —— 返回从字符串开头一直到索引值为 stop 的那个字符之前的所有字符
s[start:stop:step] —— 返回从索引值为 start 开始一直到索引值为 stop 的那个字符之前的，以 step 为步长提取的所有字符
s[::-1] —— 返回从开始到结尾的字符，但是步长是从后向前数的 ！！！！
           是以最外层数组为标准的！！


        
        
